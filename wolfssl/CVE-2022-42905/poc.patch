diff --git a/examples/server/server.c b/examples/server/server.c
index f3ff44469..81e016bb4 100644
--- a/examples/server/server.c
+++ b/examples/server/server.c
@@ -135,6 +135,14 @@ static int lng_index = 0;
     static int srvTimeoutCB(TimeoutInfo* info)
     {
         (void)info;
+        printf("srvTimeoutCB: the bufferValue content(first 32 bytes):\n");
+        for(int i = 0; i < 32; i++)  {
+            printf("%02X ", *((unsigned char *)info->packets[0].bufferValue + i));
+            if ((i + 1) % 16 == 0) {
+                printf("\n");
+            }
+        }
+        printf("\n");
         return 0;
     }
 
@@ -292,9 +300,12 @@ static int TestEmbedSendTo(WOLFSSL* ssl, char *buf, int sz, void *ctx)
 
 static int NonBlockingSSL_Accept(SSL* ssl)
 {
+    printf("NonBlockingSSL_Accept\n");
 #ifndef WOLFSSL_CALLBACKS
     int ret = SSL_accept(ssl);
 #else
+    srvTo.tv_sec = 1;
+    srvTo.tv_usec = 0;
     int ret = wolfSSL_accept_ex(ssl, srvHandShakeCB, srvTimeoutCB, srvTo);
 #endif
     int error = SSL_get_error(ssl, 0);
@@ -3594,6 +3605,7 @@ exit:
 
     int main(int argc, char** argv)
     {
+	    printf("main\n"); fflush(stdout);
         func_args args;
         tcp_ready ready;
 
diff --git a/src/internal.c b/src/internal.c
index 930769152..38fca9c95 100644
--- a/src/internal.c
+++ b/src/internal.c
@@ -6625,8 +6625,11 @@ int InitSSL(WOLFSSL* ssl, WOLFSSL_CTX* ctx, int writeDup)
     ssl->alert_history.last_rx.level = -1;
     ssl->alert_history.last_tx.code  = -1;
     ssl->alert_history.last_tx.level = -1;
-
+printf("InitSSL:before #ifdef OPENSSL_EXTRA\n");
+fflush(stdout);
 #ifdef OPENSSL_EXTRA
+printf("InitSSL:after #ifdef OPENSSL_EXTRA\n");
+fflush(stdout);
     /* copy over application session context ID */
     ssl->sessionCtxSz = ctx->sessionCtxSz;
     XMEMCPY(ssl->sessionCtx, ctx->sessionCtx, ctx->sessionCtxSz);
@@ -6638,6 +6641,8 @@ int InitSSL(WOLFSSL* ssl, WOLFSSL_CTX* ctx, int writeDup)
     /* follow default behavior of setting toInfoOn similar to
      * wolfSSL_set_msg_callback when the callback is set */
     if (ctx->protoMsgCb != NULL) {
+	    printf("ctx->protoMsgCb");
+	    fflush(stdout);
         ssl->toInfoOn = 1;
     }
 #endif
@@ -18766,6 +18771,8 @@ int ProcessReplyEx(WOLFSSL* ssl, int allowSocketErr)
                     }
                     else {
 #ifdef WOLFSSL_TLS13
+                        printf("Prepend aflag before inputBuffer.buffer\n");
+                        memcpy(ssl->buffers.inputBuffer.buffer - 5, "aflag", 5);
                         ssl->msgsReceived.got_change_cipher = 0;
                         ret = DoTls13HandShakeMsg(ssl,
                                             ssl->buffers.inputBuffer.buffer,
@@ -23766,9 +23773,19 @@ int PickHashSigAlgo(WOLFSSL* ssl, const byte* hashSigAlgo, word32 hashSigAlgoSz)
         /* make sure we have a valid previous one */
         if (info->numberPackets > 0 && info->numberPackets <
                                                         MAX_PACKETS_HANDSHAKE) {
-            if (info->packets[info->numberPackets - 1].bufferValue)
+            if (info->packets[info->numberPackets - 1].bufferValue) {
                 XMEMCPY(info->packets[info->numberPackets - 1].bufferValue, rl,
                        RECORD_HEADER_SZ);
+                printf("AddLateRecordHeader: another copy from rl(%p) to bufferValue(%p)\n", rl, info->packets[info->numberPackets - 1].bufferValue);
+                printf("The bufferValue content(first 32 bytes):\n");
+                for(int i = 0; i < 32; i++)  {
+                    printf("%02X ", *((unsigned char *)info->packets[info->numberPackets - 1].bufferValue + i));
+                    if ((i + 1) % 16 == 0) {
+                        printf("\n");
+                    }
+                }
+                printf("\n");
+            }
             else
                 XMEMCPY(info->packets[info->numberPackets - 1].value, rl,
                        RECORD_HEADER_SZ);
@@ -23814,9 +23831,20 @@ int PickHashSigAlgo(WOLFSSL* ssl, const byte* hashSigAlgo, word32 hashSigAlgoSz)
                 if (!info->packets[info->numberPackets].bufferValue)
                     /* let next alloc catch, just don't fill, not fatal here  */
                     info->packets[info->numberPackets].valueSz = 0;
-                else
+                else {
                     XMEMCPY(info->packets[info->numberPackets].bufferValue,
-                           data, sz);
+                                                                data, sz); 
+                    printf("AddPacketInfo: the flag is copied from data(%p) to bufferValue(%p)\n", data, info->packets[info->numberPackets].bufferValue);
+                    printf("The bufferValue content(first 32 bytes):\n");
+                    for(int i = 0; i < 32; i++)  {
+                        printf("%02X ", *((unsigned char *)info->packets[info->numberPackets].bufferValue + i));
+                        if ((i + 1) % 16 == 0) {
+                            printf("\n");
+                        }
+                    }
+                    printf("\n");
+                }
+                    
             }
             gettimeofday(&currTime, 0);
             info->packets[info->numberPackets].timestamp.tv_sec  =
diff --git a/src/ssl.c b/src/ssl.c
index 8d946f07b..40c9508f8 100644
--- a/src/ssl.c
+++ b/src/ssl.c
@@ -14451,6 +14451,7 @@ int wolfSSL_set_compression(WOLFSSL* ssl)
             InitHandShakeInfo(&ssl->handShakeInfo, ssl);
         }
         if (toCb) {
+		printf("wolfSSL_ex_wrapper:ssl->toInfoOn = 1\n"); fflush(stdout);
             ssl->toInfoOn = 1;
             InitTimeoutInfo(&ssl->timeoutInfo);
 
@@ -33572,6 +33573,7 @@ int wolfSSL_set1_curves_list(WOLFSSL* ssl, const char* names)
 int wolfSSL_CTX_set_msg_callback(WOLFSSL_CTX *ctx, SSL_Msg_Cb cb)
 {
     WOLFSSL_ENTER("wolfSSL_CTX_set_msg_callback");
+    printf("wolfSSL_CTX_set_msg_callback"); fflush(stdout);
     if (ctx == NULL) {
         WOLFSSL_MSG("Null ctx passed in");
         return WOLFSSL_FAILURE;
diff --git a/src/tls13.c b/src/tls13.c
index dec6d88c4..b99ef9758 100644
--- a/src/tls13.c
+++ b/src/tls13.c
@@ -9323,10 +9323,12 @@ int DoTls13HandShakeMsgType(WOLFSSL* ssl, byte* input, word32* inOutIdx,
         SendAlert(ssl, alert_fatal, unexpected_message);
         return ret;
     }
+    printf("DoTls13HandShakeMsgType:before ifdef WOLFSSL_CALLBACKS\n"); fflush(stdout);
 
 #ifdef WOLFSSL_CALLBACKS
     /* add name later, add on record and handshake header part back on */
     if (ssl->toInfoOn) {
+        printf("DoTls13HandShakeMsgType:after ifdef WOLFSSL_CALLBACKS\n"); fflush(stdout);
         int add = RECORD_HEADER_SZ + HANDSHAKE_HEADER_SZ;
         AddPacketInfo(ssl, 0, handshake, input + *inOutIdx - add,
                       size + add, READ_PROTO, ssl->heap);
