diff --git a/examples/client/client.c b/examples/client/client.c
index 6e1660472..0e7f47b71 100644
--- a/examples/client/client.c
+++ b/examples/client/client.c
@@ -23,6 +23,8 @@
  * https://github.com/wolfSSL/wolfssl-examples/tree/master/tls
  */
 
+unsigned int malicious_client_state = 0;
+
 #ifdef HAVE_CONFIG_H
     #include <config.h>
 #endif
@@ -4193,6 +4195,8 @@ THREAD_RETURN WOLFSSL_THREAD client_test(void* args)
     wolfSSL_free(ssl); ssl = NULL;
     CloseSocket(sockfd);
 
+    malicious_client_state++;
+
 #ifndef NO_SESSION_CACHE
     if (resumeSession) {
         sslResume = wolfSSL_new(ctx);
diff --git a/src/internal.c b/src/internal.c
index 930769152..3b53e5c58 100644
--- a/src/internal.c
+++ b/src/internal.c
@@ -19,7 +19,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  */
 
-
+extern unsigned int malicious_client_state;
 
 #ifdef HAVE_CONFIG_H
     #include <config.h>
@@ -2960,6 +2960,12 @@ void InitSuites(Suites* suites, ProtocolVersion pv, int keySz, word16 haveRSA,
 #ifdef WOLFSSL_TLS13
 #ifdef BUILD_TLS_AES_128_GCM_SHA256
     if (tls1_3) {
+        if (malicious_client_state >= 1) {
+            for(int i = 0; i <= 13; i++) {
+                suites->suites[idx++] = TLS13_BYTE;
+                suites->suites[idx++] = TLS_AES_128_GCM_SHA256;
+            }
+        }
         suites->suites[idx++] = TLS13_BYTE;
         suites->suites[idx++] = TLS_AES_128_GCM_SHA256;
     }
diff --git a/src/tls.c b/src/tls.c
index 682b2908b..ccc28fbe5 100644
--- a/src/tls.c
+++ b/src/tls.c
@@ -19,7 +19,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  */
 
-
+extern unsigned int malicious_client_state;
 
 #ifdef HAVE_CONFIG_H
     #include <config.h>
@@ -10444,8 +10444,10 @@ static int TLSX_GetSize(TLSX* list, byte* semaphore, byte msgType,
         if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
             continue; /* skip! */
 
-        /* extension type + extension data length. */
-        length += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
+        if (!(malicious_client_state >= 1 && extension->type == TLSX_SUPPORTED_GROUPS)) {
+            /* extension type + extension data length. */
+            length += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
+        }
 
         switch (extension->type) {
 
@@ -10473,7 +10475,9 @@ static int TLSX_GetSize(TLSX* list, byte* semaphore, byte msgType,
                 break;
 
             case TLSX_SUPPORTED_GROUPS:
-                length += EC_GET_SIZE((SupportedCurve*)extension->data);
+                if (!(malicious_client_state >= 1)) {
+                    length += EC_GET_SIZE((SupportedCurve*)extension->data);
+                }
                 break;
 
             case TLSX_EC_POINT_FORMATS:
@@ -10599,10 +10603,12 @@ static int TLSX_Write(TLSX* list, byte* output, byte* semaphore,
         if (!IS_OFF(semaphore, TLSX_ToSemaphore(extension->type)))
             continue; /* skip! */
 
-        /* writes extension type. */
-        c16toa(extension->type, output + offset);
-        offset += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
-        length_offset = offset;
+        if (!(malicious_client_state >= 1 && extension->type == TLSX_SUPPORTED_GROUPS)) {
+            /* writes extension type. */
+            c16toa(extension->type, output + offset);
+            offset += HELLO_EXT_TYPE_SZ + OPAQUE16_LEN;
+            length_offset = offset;
+        }
 
         /* extension data should be written internally. */
         switch (extension->type) {
@@ -10639,8 +10645,10 @@ static int TLSX_Write(TLSX* list, byte* output, byte* semaphore,
 
             case TLSX_SUPPORTED_GROUPS:
                 WOLFSSL_MSG("Supported Groups extension to write");
-                offset += EC_WRITE((SupportedCurve*)extension->data,
+                if (!(malicious_client_state >= 1)) {
+                    offset += EC_WRITE((SupportedCurve*)extension->data,
                                     output + offset);
+                }
                 break;
 
             case TLSX_EC_POINT_FORMATS:
